---
version: 2
jobs:
  # Unit tests
  test:
    docker:
    - image: cimg/node:13.11.0
    steps:
    - checkout
    - run:
        command: |
          if [ ! -f "package.json" ]; then
            echo
            echo "---"
            echo "Unable to find your package.json file. Did you forget to set the app-dir parameter?"
            echo "---"
            echo
            echo "Current directory: $(pwd)"
            echo
            echo
            echo "List directory: "
            echo
            ls
            exit 1
          fi
        name: Checking for package.json.
        working_directory: ~/project
    - run:
        command: npm run test
        name: Run NPM Tests
        working_directory: ~/project
  # Build and Publish Docker image
  build:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and Publish Docker image
          command: |
            docker build -t $IMAGE_NAME:latest .
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest
            echo "Published the docker image to Dockerhub"
  # Deploy the application on GKE
  deploy: 
    docker:
      - image: google/cloud-sdk:alpine
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Initialize gcloud CLI to connect to Google Cloud
          command: |
            # Store service account
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json

            # Initialize gcloud CLI
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE

      - run:
          name: install deployment and service
          command: |
            gcloud container clusters get-credentials buildit-devops
            gcloud components install kubectl
            kubectl apply -f ~/project/deployment.yaml
            echo "Successfully deployed to k8s cluster"
workflows:
  version: 2
  node-tests:
    jobs:
    # Unit tests trigger on both the branches
    - test:
        filters:
          branches:
            only:
            - feature/devops
            - master
    # Docker image is built and deployed only from master branch
    - build:
        requires:
        - test
        filters:
          branches:
            only: master
    # Application is deployed only from master branch
    - deploy:
        requires:
        - build
        filters:
          branches:
            only: master
